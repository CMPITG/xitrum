Xitrum is Scala web framework and server on top of Netty:
* Asynchronous, in the spirit of Netty.
* Type-safe, in the spirit of Scala.
* It fills the gap between Scalatra and Lift: it is more powerful than
  Scalatra and less complex than Lift.
* It combines MVC (controller first) style and component-based (view first) style.
  If you are familiar with Nitrogen, you will be at home with Xitrum.
* It does not try to abstract away from the underlying network layer, it lets
  you talk directly to Netty whenever you want.

+-----------------+
|    Your app     |
+-----------------+
|      Xitrum     |
| +-------------+ |
| |  Framework  | |
| +-------------+ |
| | Middlewares | |
| +-------------+ |
| | HTTP Server | |
| +-------------+ |
+-----------------+
|      Netty      |
+-----------------+

Layers in Xitrum are tightly coupled for speed.

Xitrum needs Java 5 or above because of Netty.

== SBT project source directory layout

A typical blog application will have this directory layout:

config
  blog.properties
  logback.properties
lib
  jrebel.jar
lib_managed
project
public
  css
  img
  js
src
  main
    scala
      blog
        action
          ArticleIndex.scala
          ArticleShow.scala
          ArticleNewEdit.scala
        helper
          ArticleHelper.scala
        model
          Article.scala

== SBT project dependency

To add Xitrum to project dependencies:
"tv.cntt" %% "xitrum" % "1.0-SNAPSHOT"

Xitrum uses SLF4J 1.6.1. You must provide an SLF4J implentation that compatible
with SLF4J 1.6.1, like logback-classic 0.9.27:
"ch.qos.logback" % "logback-classic" % "0.9.27"

== Deployed directory layout

bin
  runner.sh
config
  blog.properties
  logback.properties
lib
  blog.jar
  ...
public
  css
  img
  js
